buildscript {
    ext {
        jda_version = '4.2.0_215'
        lavaplayer_version = '1.3.60'
        lavaplayer_arm_version = '1.3.10'

        slf4j_version = '2.0.0-alpha1'
        logback_version = '1.3.0-alpha4'

        picocli_version = '4.5.2'
        raksrinana_utils_version = '14.0.15'
        jackson_version = '2.11.3'
        httpclient_version = '4.5.13'
        lang3_version = '3.11'
        reflections_version = '0.9.12'

        jump3r_version = '1.0.5'
        emoji_java_version = '5.1.1'
        imgscalr_version = '4.2'
        thumbnailator_version = '0.4.13'
        twittered_version = '1.11'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'com.novoda.build-properties' version '0.4.1'
    id 'idea'
    id 'java'
    id 'application'
    id 'io.freefair.lombok' version '5.3.0'
}

def secretsFile = new File(".", "secrets.properties")

if (!secretsFile.getParentFile().exists()) {
    secretsFile.mkdirs()
}

if (!secretsFile.exists()) {
    secretsFile.withWriterAppend { w ->
        w << "\n"
    }
}

buildProperties {
    secrets {
        using(file('secrets.properties')).or(System.getenv()).or([
                "GITHUB_USER" : "RakSrinaNa",
                "GITHUB_TOKEN": "N/A"
        ])
    }
}

group = 'fr.raksrinana'
description = 'RSNDiscord'
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_15

mainClassName = project.mainClass

dependencies {
    implementation("net.dv8tion:JDA:${jda_version}") {
        exclude module: 'opus-java'
    }
    implementation("com.sedmelluq:lavaplayer:${lavaplayer_version}")
    implementation("com.github.natanbc:lavaplayer-arm-natives:${lavaplayer_arm_version}")
    implementation("de.sciss:jump3r:${jump3r_version}")

    implementation("org.slf4j:slf4j-api:${slf4j_version}")
    implementation("ch.qos.logback:logback-classic:${logback_version}") {
        exclude group: 'edu.washington.cs.types.checker', module: 'checker-framework'
    }
    implementation("fr.raksrinana:utils.http:${raksrinana_utils_version}")

    implementation("info.picocli:picocli:${picocli_version}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jackson_version}")
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jackson_version}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jackson_version}")
    implementation("org.apache.httpcomponents:httpclient:${httpclient_version}")
    implementation("org.apache.commons:commons-lang3:${lang3_version}")
    implementation("org.reflections:reflections:${reflections_version}")
    implementation("com.vdurmont:emoji-java:${emoji_java_version}")
    implementation("org.imgscalr:imgscalr-lib:${imgscalr_version}")
    implementation("net.coobird:thumbnailator:${thumbnailator_version}")
    implementation("com.github.redouane59.twitter:twittered:${twittered_version}")
}

repositories {
    maven {
        url = 'https://maven.pkg.github.com/RakSrinaNa/JavaUtils/'
        credentials {
            username buildProperties.secrets['GITHUB_USER'].string
            password buildProperties.secrets['GITHUB_TOKEN'].string
        }
    }
    jcenter()
    mavenCentral()
}

processResources {
    expand project.properties
}

// Workaround as per https://youtrack.jetbrains.com/issue/IDEA-197469
sourceSets {
    main {
        java {
            srcDirs = ["src/main/java"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    main.output.resourcesDir = main.java.outputDir
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test {
    useJUnitPlatform()
}

application {
    mainModule = project.moduleName
    mainClass = project.mainClass
}

java {
    modularity.inferModulePath.set(true)
}

shadowJar {
    archivesBaseName = project.name
    archiveClassifier = 'shaded'
    archiveVersion = ''
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.deprecation = true
}

tasks.withType(Wrapper) {
    gradleVersion = project.wrapper_version
}
